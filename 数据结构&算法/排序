1、堆排序
堆：完全二叉树（除最后一层外，每一层上的节点数均达到最大值；在最后一层上只缺少右边的若干结点）。
大顶堆：每个节点的值都大于或者等于它的左右子节点的值，arr[i] >= arr[2i + 1] && arr[i] >= arr[2i + 2]。
小顶堆：每个节点的值都小于或者等于它的左右子节点的值，arr[i] <= arr[2i + 1] && arr[i] <= arr[2i + 2]。

堆排序的基本思想是：1.将带排序的序列构造成一个大顶堆，根据大顶堆的性质，当前堆的根节点（堆顶）就是序列中最大的元素；2.将堆顶元素和最后一个元素交换，然后将剩下的节点重新构造成一个大顶堆；3.重复步骤2，如此反复，从第一次构建大顶堆开始，每一次构建，我们都能获得一个序列的最大值，然后把它放到大顶堆的尾部。最后，就得到一个有序的序列了。升序用大顶堆，求降序用小顶堆。

复杂度：
堆用来进行全排序，时间复杂度是 O(nlogn)
而快排用来全排序，平均时间复杂度也是 O(nlogn)
但堆排序可以用来求 TopK 时，堆的时间复杂度为 O(Klog2(n)，因为它只需要进行 K 轮排序即可。 

//堆排序
function heapSort(array &$arr)
{
    $count = count($arr);
    //首次构造大根堆，从最后一个非叶子节点 floor($count/2)-1 开始，自下而上调整
    for ($i = floor($count / 2) - 1; $i >= 0; $i--) {
        $this->heapAdjust($arr, $i, $count-1);
    }
    for ($i = $count - 1; $i > 0; $i--) {
        //将堆顶元素与最后一个元素交换，摘除最后元素，将剩余元素重新调整为大根堆，循环往复
        $this->swap($arr, 0, $i);
        //从上往下调整，是因为只有最顶上的被换了，其他分支都满足最大堆
        $this->heapAdjust($arr, 0, $i - 1);
    }
}
//从某个节点开始，使其下成为一个大根堆
function heapAdjust(array &$arr, $start, $end)
{
    $temp = $arr[$start];
    for ($j = 2 * $start + 1; $j <= $end; $j = 2 * $j + 1) {
        //转化为右孩子
        if ($j+1<= $end && $arr[$j] < $arr[$j + 1]) {
            $j++;
        }
        //已经满足大根堆
        if ($temp >= $arr[$j]) {
            break;
        }
        //将根节点设置为子节点的较大值
        $arr[$start] = $arr[$j];
        //继续往下
        $start = $j;
    }
    $arr[$start] = $temp;
}
//交换位置
function swap(array &$arr, $a, $b)
{
    $temp = $arr[$a];
    $arr[$a] = $arr[$b];
    $arr[$b] = $temp;
}