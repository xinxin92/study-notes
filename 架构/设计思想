1. 前置准备：提高性能
（1）在存在流量洪峰的活动中，活动页面需要用到的图片、视频、H5页面等资源，如果实时请求，服务器网络带宽会面临巨大压力，基本无法支撑，另外由于资源下载慢，用户体验差。因此，采用预先下载的方式，在活动开始前几天把资源推送给客户端，客户端在需要使用时直接从本地加载。
（2）微信除夕摇一摇抢红包活动中，红包的配置方案是超级复杂的，如果在当天摇的过程中即时生成随机红包，这显然是风险齐高逻辑奇复杂的。对待只许成功不许失败的项目，主流程必须极简高效，所以这里全部的资金和红包数量都需要按方案规则提前切分、部署好。

2. 异步：提高性能
（1）在微信抢红包环节，涉及资金的业务逻辑比较复杂，还有很多数据库事务处理，耗时会比较长，因此用户抢到红包后不会同步进行后续的账务处理，请求会被放入红包异步队列，再通过异步队列转给微信支付后台，由微信支付后台完成后续业务逻辑。

3. 预埋能力：提高扩展性
（1）为支持更加复杂的业务场景，在客户端和服务器都加入很多可以后期灵活调整的预埋能力，以更好地服务产品运营，例如：可调整的字体、颜色、图标、模块展示等等。

4. 容量配额：提高可用性
（1）在摇一摇抢红包活动中，我们评估并验证出系统每秒最大拆红包量后，就可以在处理用户摇一摇请求时，限制系统每秒最大发放红包配额，这就间接保证了拆红包量不会超出处理能力。

5. 主动丢弃：提高可用性
（1）上游调用端监控并根据依赖服务的过载情况，主动丢弃一定比例的请求，减轻下游服务的压力；

6. 服务降级：提高性能、可用性
（1）微信除夕摇一摇抢红包活动中，在某个园区不可用时，不做记录级的“断点续发”，而是将红包文件按时段进行切分，降级为只做文件级的“断点续发”。使用降级方案后，故障园区当前发放时段的红包文件不会接着发放，仅保证下一时段的红包能通过其他园区正常发出去。
（2）如果领取红包请求量过大，积压在消息队列中，红包的入账会出现延时，但不会导致失败。

#秒杀思路：
10万以下：
redis的incr/decr操作秒杀，秒杀成功的后续逻辑加入消息队列异步处理；
10万以上：
用随机数函数做漏斗，过滤大部分请求，少量请求走redis控制秒杀；
机器负载均衡，通过加权使得90%的请求直接返回秒杀失败页面，不走秒杀接口；少量请求通过其他机器，走秒杀接口秒杀；
各秒杀机器上提前规划好奖品数量，通过读写文件方式，不走redis网络消耗，进行秒杀处理；
