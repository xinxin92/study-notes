#php连接redis的connect和pconnect方法的区别：
connect：脚本结束之后连接就释放了；
pconnect：脚本结束之后连接不释放，连接保持在php-fpm进程中。每个php-fpm进程占用一个连接，当php-fpm进程结束时会释放掉；

#各类型的数据结构：https://www.cnblogs.com/xuxinstyle/p/13282918.html
1.字符串：SDS动态字符串;
Redis的字符串是动态字符串，内部实现采用预分配冗余空间来减少内存的频繁分配，扩容方式为加倍现有空间，超过1M，扩容时只会多扩容1M，最大长度为512M；
2.列表：quicklist（由ziplist组成的双向列表）；
3.哈希：ziplist或hashtable；
4.集合：hashtable（有键没有值）；
5.有序集合：ziplist或skiplist与dict的结合；

#hash时什么情况才用ziplist？
同时满足以下条件：
1. 哈希对象保存的所有键值的字符串长度小于64字节；
2. 哈希对象保存的键值对数量小于512个；
压缩列表：连续内存块组成的顺序型(sequential)数据结构；
ziplist每次添加或者删除元素都会出现内存移动的问题

#ZSet结构同时包含一个字典和一个跳跃表，跳跃表按score从小到大保存所有集合元素。字典保存着从member到score的映射；
skiplist用来保障有序性和访问查找性能，dict就用来存储元素信息，并且dict的访问时间复杂度为O(1)。

#持久化：
1.RDB持久化既可以手动执行也可以根据服务器配置选项定期执行，该功能可以将某个节点上的数据库状态保存到一个RDB文件中；
2.AOF持久化是通过保存Redis服务器所执行的写命令来记录数据库状态的；
3.Redis4.0混合持久化：重启redis时会如果使用rdb来恢复内存状态会丢失大量数据,而使用AOF日志重放则性能会慢很多,Redis4.0则是将rdb文件的内容和增量的AOF日志存放在一起,于是在redis重启时先加载rdb文件再重放AOF日志；

#过期策略：懒汉式删除 + 定期删除
1. 惰性处理：key过期的时候不删除，每次通过key获取值的时候去检查是否过期，若过期，则删除，返回null（CPU友好，内存不友好）；
2. 定时处理：CPU空闲时在定期serverCron任务中，逐出部分过期Key;（CPU不友好，内存友好）；
大致步骤如下：
1. 清理时依次遍历所有的db;
2. 从过期字典中随机取 20 个 key，删除这 20 个 key 中已经过期的 key；
3. 如果过期的 key 比率超过 1/4，那就重复步骤 2；
4.在清理过程中，若达到了25%CPU时间，退出清理过程;

#淘汰策略：
当 Redis 执行写操作时，会检测使用内存是否超出 maxmemory，如果超出就会执行一次淘汰算法；
1. noeviction  停止写请求，读请求可以继续进行。这是默认的淘汰策略。
2. volatile-lru  过期key字典中，最少使用的 key 优先被淘汰。
3. volatile-ttl   过期key字典中，越接近过期的key优先被淘汰。
4. volatile-random 过期key字典中，随机淘汰key。
5. allkeys-lru 全局key字典中，最少使用的 key 优先被淘汰。
6. allkeys-random 全局key字典中，随机淘汰key。
Redis的近似LRU淘汰算法，相比严格算法用到的双向链表，仅仅为每个key额外分配了24bit空间用来记录最后访问时间，节省了内存开销；
当进行淘汰时，redis随机采样出 5(可配置)个 key，然后淘汰掉最旧的 key，如果淘汰后内存还是超出 maxmemory，那就继续随机采样淘汰，直到内存低于 maxmemory 为止。

#过期与淘汰策略等涉及的删除动作，redis 4.0 引入了lazyfree的机制，lazyfree的原理：
在删除对象时只是进行逻辑删除（全局key字典中摘除），然后把对象丢给后台，让后台线程（在Redis内部它被特称为BIO）去执行真正的destruct，避免由于对象体积过大而造成阻塞;
过期策略及淘汰策略中均不遍历key，而是随机抽取少量key进行清理或淘汰工作，减少耗时；

#Redis5.0 最大的新特性就是多出了一个数据结构 Stream，它是一个新的强大的支持多播的可持久化的消息队列；

#位图的主要应用场合：标示连续（或接近连续，即大部分会出现）的关键字序列的状态（状态数/关键字个数 越小越好）。

#rehash:Redis使用渐进式rehash小步搬迁，搬迁操作埋伏在当前字典的后续指令中(来自客户端的hset/hdel指令等)以及在定时任务中的主动搬迁;
在dict的内部，维护了两张哈希表; 以桶为单位进行搬迁；

#集群模式：主从、哨兵、cluster





